version: 2.1
description: Run BackstopJS

aliases:
  githus_status: &github_status |-
    which curl > /dev/null || (echo "Need curl(1) to be installed."; exit 1)
    which jq > /dev/null || (echo "Need jq(1) to be installed."; exit 1)

    if [ -z "${<< parameters.github_token >>}" ]; then
      echo "Need GitHub API token (\$<< parameters.github_token >>)."
      exit 1
    fi

    if [ -z "${<< parameters.circle_token >>}" ]; then
      echo "Need CircleCI API token (\$<< parameters.circle_token >>)."
      exit 1
    fi

    CIRCLE_API_URL="https://circleci.com/api/v1.1/project/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BUILD_NUM}/artifacts?circle-token=${<< parameters.circle_token >>}"
    HTML_REPORT=$(jq -r .paths.html_report backstop.json)
    ARTIFACT_URL=$(curl --fail --silent "${CIRCLE_API_URL}" | jq -r ".[] | select(.path==\"${HTML_REPORT}/index.html\").url")

    if [ -z "${ARTIFACT_URL}" ]; then
      echo "No BackstopJS report found. Not posting a GitHub Status."
      exit 0
    fi

    GITHUB_API_URL="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/statuses/${CIRCLE_SHA1}"
    STATUS_DATA="{\"state\": \"${STATE}\", \"description\": \"Report\", \"context\": \"BackstopJS\", \"target_url\": \"${ARTIFACT_URL}\"}"
    curl --fail --silent -X POST --user ":${<< parameters.github_token >>}" "${GITHUB_API_URL}" --data "${STATUS_DATA}"

  backstop_command: &backstop_command |-
    which backstop > /dev/null || which yarn > /dev/null || (echo "Need yarn(1) to be installed."; exit 1)
    which backstop > /dev/null || sudo yarn global add backstopjs --prefix /usr/local

    backstop ${BACKSTOP_COMMAND}

commands:
  reference:
    steps:
      - run:
          name: "BackstopJS: Generate reference bitmaps"
          environment:
            BACKSTOP_COMMAND: reference
          command: *backstop_command

  test:
    parameters:
      ci_report:
        type: string
        default: backstop_data/ci_report
      paths:
        type: string
        default: backstop_data

    steps:
      - run:
          name: "BackstopJS: Run visual regression test"
          environment:
            BACKSTOP_COMMAND: test
          command: *backstop_command
      - store_test_results:
          path: << parameters.ci_report >>
      - store_artifacts:
          path: << parameters.paths >>
          destination: << parameters.paths >>

  status:
    parameters:
      circle_token:
        description: Environment variable with a CircleCI API token with at least "Build Artifacts" scope
        type: env_var_name
        default: CIRCLE_TOKEN
      github_token:
        description: Environment variable with a GitHub API token with at least "repo:status" access
        type: env_var_name
        default: GITHUB_TOKEN

    steps:
      - run:
          name: "BackstopJS: Report success status and report link to GitHub"
          environment:
            STATE: success
          command: *github_status
          when: on_success
      - run:
          name: "BackstopJS: Report error status and report link to GitHub"
          environment:
            STATE: error
          command: *github_status
          when: on_fail

executors:
  backstop-node:
    docker:
      - image: circleci/node:12-browsers

jobs:
  visual-test:
    executor: << parameters.executor >>
    parameters:
      executor:
        description: The executor to use. Must have at least curl(1), jq(1), node(1), yarn(1) and browsers.
        type: executor
        default: backstop-node
      ci_report:
        type: string
        default: backstop_data/ci_report
      paths:
        type: string
        default: backstop_data
      circle_token:
        description: Environment variable with a CircleCI API token with at least "Build Artifacts" scope
        type: env_var_name
        default: CIRCLE_TOKEN
      github_token:
        description: Environment variable with a GitHub API token with at least "repo:status" access
        type: env_var_name
        default: GITHUB_TOKEN
      before_reference:
        description: Steps to perform before taking reference images
        type: steps
        default: []
      before_test:
        description: Steps to perform before taking test images
        type: steps
        default: []
    steps:
      - checkout
      - << parameters.before_reference >>
      - reference
      - << parameters.before_test >>
      - test:
          ci_report: << parameters.ci_report >>
          paths: << parameters.paths >>
      - status:
          circle_token: << parameters.circle_token >>
          github_token: << parameters.github_token >>
